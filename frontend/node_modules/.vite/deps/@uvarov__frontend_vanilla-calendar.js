import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/@uvarov.frontend/vanilla-calendar/build/vanilla-calendar.min.js
var require_vanilla_calendar_min = __commonJS({
  "node_modules/@uvarov.frontend/vanilla-calendar/build/vanilla-calendar.min.js"(exports, module) {
    if (typeof window !== "undefined") {
      !function(e, t) {
        if ("object" == typeof exports && "object" == typeof module)
          module.exports = t();
        else if ("function" == typeof define && define.amd)
          define([], t);
        else {
          var s = t();
          for (var l in s)
            ("object" == typeof exports ? exports : e)[l] = s[l];
        }
      }(self, () => (() => {
        "use strict";
        var e = { d: (t2, s2) => {
          for (var l2 in s2)
            e.o(s2, l2) && !e.o(t2, l2) && Object.defineProperty(t2, l2, { enumerable: true, get: s2[l2] });
        }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        } }, t = {};
        e.r(t), e.d(t, { default: () => R });
        const s = (e2) => {
          if (!["default", "year"].includes(e2.currentType))
            return;
          const t2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.arrowPrev}`), s2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.arrowNext}`);
          (() => {
            if (!e2.dateMin || !e2.dateMax || "default" !== e2.currentType)
              return;
            const l2 = e2.selectedMonth === e2.dateMin.getUTCMonth(), a2 = e2.selectedMonth === e2.dateMax.getUTCMonth(), n2 = !e2.settings.selection.year || e2.selectedYear === e2.dateMin.getUTCFullYear(), i2 = !e2.settings.selection.year || e2.selectedYear === e2.dateMax.getUTCFullYear();
            l2 && n2 || !e2.settings.selection.month ? t2.style.visibility = "hidden" : t2.style.visibility = "", a2 && i2 || !e2.settings.selection.month ? s2.style.visibility = "hidden" : s2.style.visibility = "";
          })(), e2.dateMin && e2.dateMax && "year" === e2.currentType && void 0 !== e2.viewYear && (e2.dateMin.getUTCFullYear() && e2.viewYear - 7 <= e2.dateMin.getUTCFullYear() ? t2.style.visibility = "hidden" : t2.style.visibility = "", e2.dateMax.getUTCFullYear() && e2.viewYear + 7 >= e2.dateMax.getUTCFullYear() ? s2.style.visibility = "hidden" : s2.style.visibility = "");
        }, l = (e2, t2) => {
          e2.popups && Object.keys(e2.popups).forEach((s2) => {
            var l2;
            const a2 = t2.querySelector(`[data-calendar-day="${s2}"]`);
            if (a2) {
              const t3 = null == (l2 = e2.popups) ? void 0 : l2[s2];
              (null == t3 ? void 0 : t3.modifier) && t3.modifier.trim().split(" ").forEach((e3) => {
                a2.classList.add(e3);
              }), (null == t3 ? void 0 : t3.html) && (a2.parentNode.innerHTML += `<div class="${e2.CSSClasses.dayPopup}">${t3.html}</div>`);
            }
          });
        }, a = (e2, t2) => {
          if (!e2)
            return null;
          const s2 = new Date(e2).getUTCDate(), l2 = new Date(e2).getUTCMonth(), a2 = new Date(e2).getUTCFullYear(), n2 = new Date(Date.UTC(a2, l2, s2)), i2 = t2 ? n2.getUTCDay() || 7 : n2.getUTCDay();
          n2.setUTCDate(n2.getUTCDate() + 4 - i2);
          const d2 = new Date(Date.UTC(n2.getUTCFullYear(), 0, 1));
          return { year: a2, week: Math.ceil(((+n2 - +d2) / 864e5 + 1) / 7) };
        }, n = (e2, t2, s2) => {
          if (!e2.settings.visibility.weekNumbers)
            return;
          const l2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.weekNumbers}`), n2 = e2.HTMLElement.querySelectorAll(`.${e2.CSSClasses.dayBtn}`);
          if (!l2 || !n2[0])
            return;
          l2.innerHTML = "";
          const i2 = Math.ceil((t2 + s2) / 7), d2 = document.createElement("b");
          d2.className = e2.CSSClasses.weekNumbersTitle, d2.innerText = "#", l2.append(d2);
          const r2 = document.createElement("div");
          r2.className = e2.CSSClasses.weekNumbersContent, l2.append(r2);
          const c2 = document.createElement("span");
          c2.className = e2.CSSClasses.weekNumber;
          for (let t3 = 0; t3 < i2; t3++) {
            const s3 = a(n2[7 * t3].dataset.calendarDay, e2.settings.iso8601);
            if (!s3)
              return;
            const l3 = c2.cloneNode(true);
            l3.innerText = `${s3.week}`, l3.dataset.calendarYearWeek = `${s3.year}`, r2.append(l3);
          }
        }, i = (e2) => {
          const t2 = e2.getUTCFullYear();
          let s2 = e2.getUTCMonth() + 1, l2 = e2.getUTCDate();
          return s2 = s2 < 10 ? `0${s2}` : s2, l2 = l2 < 10 ? `0${l2}` : l2, `${t2}-${s2}-${l2}`;
        }, d = (e2) => {
          if (void 0 === e2.selectedMonth || void 0 === e2.selectedYear)
            return;
          const t2 = new Date(Date.UTC(e2.selectedYear, e2.selectedMonth, 1)), s2 = new Date(Date.UTC(e2.selectedYear, e2.selectedMonth + 1, 0)).getUTCDate();
          let d2 = Number(t2.getUTCDay());
          e2.settings.iso8601 && (d2 = Number((0 !== t2.getUTCDay() ? t2.getUTCDay() : 7) - 1));
          const r2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.days}`);
          if (!r2)
            return;
          const c2 = document.createElement("div"), o2 = document.createElement("button");
          c2.className = e2.CSSClasses.day, o2.className = e2.CSSClasses.dayBtn, o2.type = "button", e2.settings.selection.day && ["single", "multiple", "multiple-ranged"].includes(e2.settings.selection.day) && r2.classList.add(e2.CSSClasses.daysSelecting), r2.innerHTML = "";
          const u2 = (t3, s3, l2, n2, i2) => {
            const d3 = c2.cloneNode(true), u3 = o2.cloneNode(true);
            if (i2 && u3.classList.add(i2), u3.innerText = t3, u3.dataset.calendarDay = l2, e2.settings.visibility.weekNumbers) {
              const t4 = a(l2, e2.settings.iso8601);
              if (!t4)
                return;
              u3.dataset.calendarWeekNumber = `${t4.week}`;
            }
            ((t4, s4, l3, a2) => {
              !e2.settings.visibility.weekend || 0 !== s4 && 6 !== s4 || t4.classList.add(e2.CSSClasses.dayBtnWeekend), Array.isArray(e2.settings.selected.holidays) && e2.settings.selected.holidays.forEach((s5) => {
                s5 === l3 && t4.classList.add(e2.CSSClasses.dayBtnHoliday);
              });
              let n3 = e2.date.today.getDate(), i3 = e2.date.today.getMonth() + 1;
              n3 = n3 < 10 ? `0${n3}` : n3, i3 = i3 < 10 ? `0${i3}` : i3;
              const d4 = `${e2.date.today.getFullYear()}-${i3}-${n3}`;
              e2.settings.visibility.today && t4.dataset.calendarDay === d4 && t4.classList.add(e2.CSSClasses.dayBtnToday), e2.selectedDates && 0 === e2.selectedDates.indexOf(l3) || e2.selectedDates && e2.selectedDates[0] && e2.selectedDates.indexOf(l3) === e2.selectedDates.length - 1 ? t4.classList.add(e2.CSSClasses.dayBtnSelected) : e2.selectedDates && e2.selectedDates.indexOf(l3) > 0 && "multiple-ranged" === e2.settings.selection.day ? (t4.classList.add(e2.CSSClasses.dayBtnSelected), t4.classList.add(e2.CSSClasses.dayBtnIntermediate)) : e2.selectedDates && e2.selectedDates.indexOf(l3) > 0 && t4.classList.add(e2.CSSClasses.dayBtnSelected), (e2.settings.range.min > l3 || e2.settings.range.max < l3) && (t4.classList.add(e2.CSSClasses.dayBtnDisabled), t4.tabIndex = -1), e2.settings.selection.month || a2 || (t4.classList.add(e2.CSSClasses.dayBtnDisabled), t4.tabIndex = -1), e2.settings.selection.year || new Date(l3).getFullYear() === e2.selectedYear || (t4.classList.add(e2.CSSClasses.dayBtnDisabled), t4.tabIndex = -1), Array.isArray(e2.settings.range.disabled) ? e2.settings.range.disabled.forEach((s5) => {
                s5 === l3 && (t4.classList.add(e2.CSSClasses.dayBtnDisabled), t4.tabIndex = -1);
              }) : Array.isArray(e2.settings.range.enabled) && (t4.classList.add(e2.CSSClasses.dayBtnDisabled), t4.tabIndex = -1, e2.settings.range.enabled.forEach((s5) => {
                s5 === l3 && (t4.classList.remove(e2.CSSClasses.dayBtnDisabled), t4.tabIndex = 0);
              }));
            })(u3, s3, l2, n2), d3.append(u3), r2.append(d3);
          };
          (() => {
            if (void 0 === e2.selectedMonth || void 0 === e2.selectedYear)
              return;
            let t3 = new Date(Date.UTC(e2.selectedYear, e2.selectedMonth, 0)).getUTCDate() - d2, s3 = e2.selectedYear, l2 = e2.selectedMonth;
            0 === e2.selectedMonth ? (l2 = e2.locale.months.length, s3 = e2.selectedYear - 1) : e2.selectedMonth < 10 && (l2 = `0${e2.selectedMonth}`);
            for (let a2 = 0; a2 < d2; a2++) {
              t3 += 1;
              const a3 = `${s3}-${l2}-${t3}`, n2 = new Date(Date.UTC(e2.selectedYear, e2.selectedMonth, t3 - 1)).getUTCMonth() - 1, i2 = new Date(Date.UTC(e2.selectedYear, n2, t3)).getUTCDay();
              u2(String(t3), i2, a3, false, e2.CSSClasses.dayBtnPrev);
            }
          })(), (() => {
            if (void 0 !== e2.selectedMonth && void 0 !== e2.selectedYear)
              for (let t3 = 1; t3 <= s2; t3++) {
                const s3 = new Date(Date.UTC(e2.selectedYear, e2.selectedMonth, t3)), l2 = i(s3), a2 = s3.getUTCDay();
                u2(String(t3), a2, l2, true, null);
              }
          })(), (() => {
            if (void 0 === e2.selectedMonth || void 0 === e2.selectedYear)
              return;
            const t3 = d2 + s2, l2 = Math.ceil(t3 / e2.locale.weekday.length), a2 = e2.locale.weekday.length * l2 - t3;
            let n2 = e2.selectedYear, i2 = String(e2.selectedMonth + 2);
            e2.selectedMonth + 1 === e2.locale.months.length ? (i2 = "01", n2 = e2.selectedYear + 1) : e2.selectedMonth + 2 < 10 && (i2 = `0${e2.selectedMonth + 2}`);
            for (let t4 = 1; t4 <= a2; t4++) {
              const s3 = `${n2}-${i2}-${t4 < 10 ? `0${t4}` : String(t4)}`, l3 = new Date(Date.UTC(e2.selectedYear, e2.selectedMonth, t4)).getUTCMonth() + 1, a3 = new Date(Date.UTC(e2.selectedYear, l3, t4)).getUTCDay();
              u2(String(t4), a3, s3, false, e2.CSSClasses.dayBtnNext);
            }
          })(), l(e2, r2), n(e2, d2, s2);
        }, r = (e2) => `
	<button type="button"
		class="${e2.CSSClasses.arrow} ${e2.CSSClasses.arrowPrev}"
		data-calendar-arrow="prev"
		title="Prev">
	</button>
`, c = (e2) => `
	<button type="button"
	class="${e2.CSSClasses.arrow} ${e2.CSSClasses.arrowNext}"
	data-calendar-arrow="next"
	title="Next">
	</button>
`, o = (e2) => `
	<button type="button"
		class="${e2.CSSClasses.month}"
		data-calendar-selected-month>
	</button>
`, u = (e2) => `
	<button type="button"
		class="${e2.CSSClasses.year}"
		data-calendar-selected-year>
	</button>
`, v = (e2) => `
	<div class="${e2.CSSClasses.week}"></div>
`, y = (e2) => `
	<div class="${e2.CSSClasses.days}"></div>
`, m = (e2) => `
	<div class="${e2.CSSClasses.months}"></div>
`, g = (e2) => `
	<div class="${e2.CSSClasses.years}"></div>
`, C = (e2) => e2.settings.visibility.weekNumbers ? `
	<div class="${e2.CSSClasses.weekNumbers}"></div>
` : "", S = (e2) => e2.settings.selection.time ? `
	<div class="${e2.CSSClasses.time}"></div>
` : "", h = (e2) => {
          let t2 = null;
          switch (e2) {
            case "ArrowPrev":
              t2 = r;
              break;
            case "ArrowNext":
              t2 = c;
              break;
            case "Month":
              t2 = o;
              break;
            case "Year":
              t2 = u;
              break;
            case "Week":
              t2 = v;
              break;
            case "Days":
              t2 = y;
              break;
            case "Months":
              t2 = m;
              break;
            case "Years":
              t2 = g;
              break;
            case "WeekNumbers":
              t2 = C;
              break;
            case "ControlTime":
              t2 = S;
          }
          return t2;
        }, b = (e2, t2) => t2.replace(/<#(.*?)\/>/g, (t3, s2) => {
          const l2 = h(s2.replace(/[\s\n\t]/g, ""));
          return l2 ? l2(e2) : "";
        }).replace(/[\n\t]/g, ""), p = (e2) => {
          const t2 = e2.HTMLElement;
          switch (t2.classList.add(e2.CSSClasses.calendar), e2.currentType) {
            case "default":
              t2.classList.add(e2.CSSClasses.calendarDefault), t2.classList.remove(e2.CSSClasses.calendarMonth), t2.classList.remove(e2.CSSClasses.calendarYear), t2.innerHTML = b(e2, e2.DOMTemplates.default);
              break;
            case "month":
              t2.classList.remove(e2.CSSClasses.calendarDefault), t2.classList.add(e2.CSSClasses.calendarMonth), t2.classList.remove(e2.CSSClasses.calendarYear), t2.innerHTML = b(e2, e2.DOMTemplates.month);
              break;
            case "year":
              t2.classList.remove(e2.CSSClasses.calendarDefault), t2.classList.remove(e2.CSSClasses.calendarMonth), t2.classList.add(e2.CSSClasses.calendarYear), t2.innerHTML = b(e2, e2.DOMTemplates.year);
          }
        }, M = (e2) => {
          if (void 0 === e2.selectedMonth)
            return;
          const t2 = e2.HTMLElement.querySelector("[data-calendar-selected-month]");
          t2 && (t2.dataset.calendarSelectedMonth = String(e2.selectedMonth), t2.innerText = e2.locale.months[e2.selectedMonth], e2.settings.selection.month ? (t2.tabIndex = 0, t2.classList.remove(e2.CSSClasses.monthDisabled)) : (t2.tabIndex = -1, t2.classList.add(e2.CSSClasses.monthDisabled)));
        }, T = (e2) => {
          if (void 0 === e2.selectedYear)
            return;
          const t2 = e2.HTMLElement.querySelector("[data-calendar-selected-year]");
          t2 && (t2.dataset.calendarSelectedYear = String(e2.selectedYear), t2.innerText = String(e2.selectedYear), e2.settings.selection.year ? (t2.tabIndex = 0, t2.classList.remove(e2.CSSClasses.yearDisabled)) : (t2.tabIndex = -1, t2.classList.add(e2.CSSClasses.yearDisabled)));
        }, D = (e2) => {
          e2.currentType = "month", p(e2), M(e2), T(e2);
          const t2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.months}`);
          if (void 0 === e2.selectedMonth || void 0 === e2.selectedYear || !e2.dateMin || !e2.dateMax || !t2)
            return;
          e2.settings.selection.month && t2.classList.add(e2.CSSClasses.monthsSelecting);
          const s2 = document.createElement("button");
          s2.type = "button", s2.className = e2.CSSClasses.monthsMonth;
          for (let l2 = 0; l2 < e2.locale.months.length; l2++) {
            const a2 = e2.locale.months[l2], n2 = s2.cloneNode(true);
            l2 === e2.selectedMonth && n2.classList.add(e2.CSSClasses.monthsMonthSelected), l2 < e2.dateMin.getUTCMonth() && e2.selectedYear === e2.dateMin.getUTCFullYear() && (n2.classList.add(e2.CSSClasses.monthsMonthDisabled), n2.tabIndex = -1), l2 > e2.dateMax.getUTCMonth() && e2.selectedYear === e2.dateMax.getUTCFullYear() && (n2.classList.add(e2.CSSClasses.monthsMonthDisabled), n2.tabIndex = -1), n2.dataset.calendarMonth = String(l2), n2.title = `${a2}`, n2.innerText = `${e2.settings.visibility.monthShort ? a2.substring(0, 3) : a2}`, t2.append(n2);
          }
        }, w = (e2) => {
          const t2 = Number(e2);
          let s2 = String(t2);
          return 0 === t2 ? s2 = "12" : 13 === t2 ? s2 = "01" : 14 === t2 ? s2 = "02" : 15 === t2 ? s2 = "03" : 16 === t2 ? s2 = "04" : 17 === t2 ? s2 = "05" : 18 === t2 ? s2 = "06" : 19 === t2 ? s2 = "07" : 20 === t2 ? s2 = "08" : 21 === t2 ? s2 = "09" : 22 === t2 ? s2 = "10" : 23 === t2 && (s2 = "11"), s2;
        }, $ = (e2, t2) => {
          const s2 = Number(e2);
          let l2 = String(s2);
          return "AM" === t2 ? 12 === s2 && (l2 = "00") : "PM" === t2 && (1 === s2 ? l2 = "13" : 2 === s2 ? l2 = "14" : 3 === s2 ? l2 = "15" : 4 === s2 ? l2 = "16" : 5 === s2 ? l2 = "17" : 6 === s2 ? l2 = "18" : 7 === s2 ? l2 = "19" : 8 === s2 ? l2 = "20" : 9 === s2 ? l2 = "21" : 10 === s2 ? l2 = "22" : 11 === s2 && (l2 = "23")), l2;
        }, f = (e2, t2) => {
          const s2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.timeRange} input[name="hours"]`), l2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.timeRange} input[name="minutes"]`), a2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.timeHours} input[name="hours"]`), n2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.timeMinutes} input[name="minutes"]`), i2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.timeKeeping}`), d2 = (t3, s3) => {
            t3.addEventListener("mouseover", () => s3.classList.add(e2.CSSClasses.isFocus));
          }, r2 = (t3, s3) => {
            t3.addEventListener("mouseout", () => s3.classList.remove(e2.CSSClasses.isFocus));
          }, c2 = (t3, s3, l3) => {
            "hours" === l3 ? e2.selectedHours = `${s3}` : "minutes" === l3 && (e2.selectedMinutes = `${s3}`), e2.selectedTime = `${e2.selectedHours}:${e2.selectedMinutes}${e2.selectedKeeping ? ` ${e2.selectedKeeping}` : ""}`, e2.settings.selected.time = e2.selectedTime, e2.actions.changeTime && e2.actions.changeTime(t3, e2.selectedTime, e2.selectedHours, e2.selectedMinutes, e2.selectedKeeping);
          }, o2 = (t3, s3, l3, a3) => {
            t3.addEventListener("input", (t4) => {
              let n3 = Number(t4.target.value);
              n3 = n3 < 10 ? `0${n3}` : `${n3}`, "hours" === l3 && 12 === a3 ? Number(t4.target.value) < a3 && Number(t4.target.value) > 0 ? (s3.value = n3, e2.selectedKeeping = "AM", i2.innerText = e2.selectedKeeping, c2(t4, n3, l3)) : (0 === Number(t4.target.value) ? (e2.selectedKeeping = "AM", i2.innerText = "AM") : (e2.selectedKeeping = "PM", i2.innerText = "PM"), s3.value = w(t4.target.value), c2(t4, w(t4.target.value), l3)) : (s3.value = n3, c2(t4, n3, l3));
            });
          }, u2 = (t3, s3, l3, a3) => {
            s3.addEventListener("change", (s4) => {
              const n3 = s4.target;
              let d3 = Number(n3.value);
              d3 = d3 < 10 ? `0${d3}` : `${d3}`, "hours" === l3 && 12 === a3 ? n3.value && Number(n3.value) <= a3 && Number(n3.value) > 0 ? (n3.value = d3, t3.value = $(d3, e2.selectedKeeping), c2(s4, d3, l3)) : n3.value && Number(n3.value) < 24 && (Number(n3.value) > a3 || 0 === Number(n3.value)) ? (0 === Number(n3.value) ? (e2.selectedKeeping = "AM", i2.innerText = "AM") : (e2.selectedKeeping = "PM", i2.innerText = "PM"), n3.value = w(n3.value), t3.value = d3, c2(s4, w(n3.value), l3)) : n3.value = e2.selectedHours : n3.value && Number(n3.value) <= a3 && Number(n3.value) >= 0 ? (n3.value = d3, t3.value = d3, c2(s4, d3, l3)) : "hours" === l3 ? n3.value = e2.selectedHours : "minutes" === l3 && (n3.value = e2.selectedMinutes);
            });
          };
          d2(s2, a2), d2(l2, n2), r2(s2, a2), r2(l2, n2), o2(s2, a2, "hours", 24 === t2 ? 23 : 12), o2(l2, n2, "minutes", 0), u2(s2, a2, "hours", 24 === t2 ? 23 : 12), u2(l2, n2, "minutes", 59), i2 && i2.addEventListener("click", (t3) => {
            i2.innerText.includes("AM") ? e2.selectedKeeping = "PM" : e2.selectedKeeping = "AM", s2.value = $(e2.selectedHours, e2.selectedKeeping), c2(t3, e2.selectedHours, "hours"), i2.innerText = e2.selectedKeeping;
          });
        }, Y = (e2) => {
          const t2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.time}`);
          if (!t2)
            return;
          const s2 = true === e2.settings.selection.time ? 12 : e2.settings.selection.time, l2 = "range" === e2.settings.selection.controlTime;
          t2.innerHTML = `
	<div class="${e2.CSSClasses.timeContent}">
		<label class="${e2.CSSClasses.timeHours}">
			<input type="text"
				name="hours"
				maxlength="2"
				value="${e2.selectedHours}"
				${l2 ? "disabled" : ""}>
		</label>
		<label class="${e2.CSSClasses.timeMinutes}">
			<input type="text"
				name="minutes"
				maxlength="2"
				value="${e2.selectedMinutes}"
				${l2 ? "disabled" : ""}>
		</label>
		${12 === s2 ? `
		<button type="button"
			class="${e2.CSSClasses.timeKeeping}"
			${l2 ? "disabled" : ""}>${e2.selectedKeeping}</button>
		` : ""}
	</div>
	<div class="${e2.CSSClasses.timeRanges}">
		<label class="${e2.CSSClasses.timeRange}">
			<input type="range"
				name="hours"
				min="0"
				max="23"
				step="${e2.settings.selection.stepHours}"
				value="${e2.selectedKeeping ? $(e2.selectedHours, e2.selectedKeeping) : e2.selectedHours}">
		</label>
		<label class="${e2.CSSClasses.timeRange}">
			<input type="range"
				name="minutes"
				min="0"
				max="59"
				step="${e2.settings.selection.stepMinutes}"
				value="${e2.selectedMinutes}">
		</label>
	</div>`, f(e2, s2);
        }, k = (e2) => {
          const t2 = [...e2.locale.weekday];
          if (!t2[0])
            return;
          const s2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.week}`), l2 = document.createElement("b");
          l2.className = e2.CSSClasses.weekDay, e2.settings.iso8601 && t2.push(t2.shift()), s2.innerHTML = "";
          for (let a2 = 0; a2 < t2.length; a2++) {
            const n2 = t2[a2], i2 = l2.cloneNode(true);
            e2.settings.visibility.weekend && e2.settings.iso8601 ? 5 !== a2 && 6 !== a2 || i2.classList.add(e2.CSSClasses.weekDayWeekend) : e2.settings.visibility.weekend && !e2.settings.iso8601 && (0 !== a2 && 6 !== a2 || i2.classList.add(e2.CSSClasses.weekDayWeekend)), i2.innerText = `${n2}`, s2.append(i2);
          }
        }, x = (e2) => {
          if (void 0 === e2.viewYear || !e2.dateMin || !e2.dateMax)
            return;
          e2.currentType = "year", p(e2), M(e2), T(e2), s(e2);
          const t2 = e2.HTMLElement.querySelector(`.${e2.CSSClasses.years}`);
          if (!t2)
            return;
          e2.settings.selection.year && t2.classList.add(e2.CSSClasses.yearsSelecting);
          const l2 = document.createElement("button");
          l2.type = "button", l2.className = e2.CSSClasses.yearsYear;
          for (let s2 = e2.viewYear - 7; s2 < e2.viewYear + 8; s2++) {
            const a2 = s2, n2 = l2.cloneNode(true);
            a2 === e2.selectedYear && n2.classList.add(e2.CSSClasses.yearsYearSelected), a2 < e2.dateMin.getUTCFullYear() && (n2.classList.add(e2.CSSClasses.yearsYearDisabled), n2.tabIndex = -1), a2 > e2.dateMax.getUTCFullYear() && (n2.classList.add(e2.CSSClasses.yearsYearDisabled), n2.tabIndex = -1), n2.dataset.calendarYear = String(a2), n2.innerText = `${a2}`, t2.append(n2);
          }
        }, L = (e2) => {
          if ("define" !== e2.settings.lang) {
            e2.locale.weekday = [];
            for (let t2 = 0; t2 < 7; t2++) {
              let s2 = new Date(0, 0, t2).toLocaleString(e2.settings.lang, { weekday: "short" });
              s2 = `${s2.charAt(0).toUpperCase()}${s2.substring(1, s2.length)}`, s2 = s2.replace(/\./, ""), e2.locale.weekday.push(s2);
            }
            e2.locale.months = [];
            for (let t2 = 0; t2 < 12; t2++) {
              let s2 = new Date(0, t2).toLocaleString(e2.settings.lang, { month: "long" });
              s2 = `${s2.charAt(0).toUpperCase()}${s2.substring(1, s2.length)}`, s2 = s2.replace(/\./, ""), e2.locale.months.push(s2);
            }
          }
        }, _ = (e2) => {
          null !== e2.settings.selected.dates ? e2.selectedDates = e2.settings.selected.dates : e2.selectedDates = [], null !== e2.settings.selected.month && e2.settings.selected.month >= 0 && e2.settings.selected.month < 12 ? e2.selectedMonth = e2.settings.selected.month : e2.selectedMonth = e2.date.today.getMonth(), null !== e2.settings.selected.year && e2.settings.selected.year >= 0 && e2.settings.selected.year <= 9999 ? e2.selectedYear = e2.settings.selected.year : e2.selectedYear = e2.date.today.getFullYear(), e2.viewYear = e2.selectedYear, e2.dateMin = e2.settings.visibility.disabled ? new Date(e2.date.min) : new Date(e2.settings.range.min), e2.dateMax = e2.settings.visibility.disabled ? new Date(e2.date.max) : new Date(e2.settings.range.max);
          const t2 = true === e2.settings.selection.time || 12 === e2.settings.selection.time;
          if (t2 || 24 === e2.settings.selection.time) {
            if ("string" == typeof e2.settings.selected.time) {
              const s2 = t2 ? /^([0-9]|0[1-9]|1[0-2]):([0-5][0-9])|(AM|PM)/g : /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])/g;
              e2.settings.selected.time.replace(s2, (s3, l2, a2, n2) => (l2 && a2 && (e2.userTime = true, e2.selectedHours = l2, e2.selectedMinutes = a2), n2 && t2 ? e2.selectedKeeping = n2 : t2 && (e2.selectedKeeping = "AM"), ""));
            }
            !e2.userTime && t2 ? (e2.selectedHours = w(String(e2.date.today.getHours())), e2.selectedMinutes = String(e2.date.today.getMinutes()), e2.selectedKeeping = Number(e2.date.today.getHours()) > 12 ? "PM" : "AM") : e2.userTime || (e2.selectedHours = String(e2.date.today.getHours()), e2.selectedMinutes = String(e2.date.today.getMinutes())), e2.selectedHours = Number(e2.selectedHours) < 10 ? `0${Number(e2.selectedHours)}` : `${e2.selectedHours}`, e2.selectedMinutes = Number(e2.selectedMinutes) < 10 ? `0${Number(e2.selectedMinutes)}` : `${e2.selectedMinutes}`, e2.selectedTime = `${e2.selectedHours}:${e2.selectedMinutes}${e2.selectedKeeping ? ` ${e2.selectedKeeping}` : ""}`;
          } else
            e2.settings.selection.time && (e2.settings.selection.time = false, console.error("The value of the time property can be: false, true, 12 or 24."));
        }, N = (e2) => {
          _(e2), L(e2), p(e2), M(e2), T(e2), s(e2), Y(e2), "default" === e2.currentType ? (k(e2), d(e2)) : "month" === e2.currentType ? D(e2) : "year" === e2.currentType && x(e2);
        }, U = (e2, t2) => {
          if (void 0 === e2.selectedMonth || void 0 === e2.selectedYear)
            return;
          const l2 = e2.locale.months.length - 1;
          switch (t2) {
            case "prev":
              0 !== e2.selectedMonth ? e2.selectedMonth -= 1 : e2.settings.selection.year && (e2.selectedYear -= 1, e2.selectedMonth = l2);
              break;
            case "next":
              e2.selectedMonth !== l2 ? e2.selectedMonth += 1 : e2.settings.selection.year && (e2.selectedYear += 1, e2.selectedMonth = 0);
          }
          e2.settings.selected.month = e2.selectedMonth, e2.settings.selected.year = e2.selectedYear, M(e2), T(e2), s(e2), d(e2);
        }, H = (e2) => {
          e2.HTMLElement.addEventListener("click", (t2) => {
            const s2 = t2.target, l2 = s2.closest(`.${e2.CSSClasses.arrow}`), a2 = s2.closest(`.${e2.CSSClasses.arrowPrev}`), n2 = s2.closest(`.${e2.CSSClasses.arrowNext}`), r2 = s2.closest(`.${e2.CSSClasses.dayBtn}`), c2 = s2.closest(`.${e2.CSSClasses.dayBtnPrev}`), o2 = s2.closest(`.${e2.CSSClasses.dayBtnNext}`), u2 = s2.closest(`.${e2.CSSClasses.year}`), v2 = s2.closest(`.${e2.CSSClasses.yearsYear}`), y2 = s2.closest(`.${e2.CSSClasses.month}`), m2 = s2.closest(`.${e2.CSSClasses.monthsMonth}`);
            l2 && "year" !== e2.currentType && "month" !== e2.currentType && U(e2, s2.dataset.calendarArrow), l2 && e2.actions.clickArrow && e2.actions.clickArrow(t2, Number(e2.selectedYear), Number(e2.selectedMonth)), (() => {
              if (e2.settings.selection.day && ["single", "multiple", "multiple-ranged"].includes(e2.settings.selection.day) && r2) {
                switch (e2.settings.selection.day) {
                  case "single":
                    e2.selectedDates && r2 && r2.dataset.calendarDay && (r2.classList.contains(e2.CSSClasses.dayBtnSelected) ? e2.selectedDates.splice(e2.selectedDates.indexOf(r2.dataset.calendarDay), 1) : (e2.selectedDates = [], e2.selectedDates.push(r2.dataset.calendarDay)));
                    break;
                  case "multiple":
                    e2.selectedDates && r2 && r2.dataset.calendarDay && (r2.classList.contains(e2.CSSClasses.dayBtnSelected) ? e2.selectedDates.splice(e2.selectedDates.indexOf(r2.dataset.calendarDay), 1) : e2.selectedDates.push(r2.dataset.calendarDay));
                    break;
                  case "multiple-ranged":
                    (() => {
                      if (!e2.selectedDates || !r2 || !r2.dataset.calendarDay)
                        return;
                      if (e2.selectedDates.length > 1 && (e2.selectedDates = []), e2.selectedDates.push(r2.dataset.calendarDay), !e2.selectedDates[1])
                        return;
                      const t3 = new Date(Date.UTC(new Date(e2.selectedDates[0]).getUTCFullYear(), new Date(e2.selectedDates[0]).getUTCMonth(), new Date(e2.selectedDates[0]).getUTCDate())), s3 = new Date(Date.UTC(new Date(e2.selectedDates[1]).getUTCFullYear(), new Date(e2.selectedDates[1]).getUTCMonth(), new Date(e2.selectedDates[1]).getUTCDate())), l3 = (t4) => {
                        if (!e2.selectedDates)
                          return;
                        const s4 = i(t4);
                        e2.settings.range.disabled && e2.settings.range.disabled.includes(s4) || e2.selectedDates.push(s4);
                      };
                      if (e2.selectedDates = [], s3 > t3)
                        for (let e3 = t3; e3 <= s3; e3.setUTCDate(e3.getUTCDate() + 1))
                          l3(e3);
                      else
                        for (let e3 = t3; e3 >= s3; e3.setUTCDate(e3.getUTCDate() - 1))
                          l3(e3);
                    })();
                }
                e2.actions.clickDay && e2.actions.clickDay(t2, e2.selectedDates), e2.settings.selected.dates = e2.selectedDates, c2 ? U(e2, "prev") : o2 ? U(e2, "next") : d(e2);
              }
            })(), (() => {
              if (e2.settings.selection.year) {
                if (l2 && "year" === e2.currentType) {
                  if (void 0 === e2.viewYear)
                    return;
                  n2 ? e2.viewYear += 15 : a2 && (e2.viewYear -= 15), x(e2);
                } else if ("year" !== e2.currentType && u2)
                  x(e2);
                else if ("year" === e2.currentType && u2)
                  e2.currentType = e2.type, N(e2);
                else if (v2) {
                  if (void 0 === e2.selectedMonth || !e2.dateMin || !e2.dateMax)
                    return;
                  e2.selectedYear = Number(v2.dataset.calendarYear), e2.currentType = e2.type, e2.selectedMonth < e2.dateMin.getUTCMonth() && e2.selectedYear === e2.dateMin.getUTCFullYear() && (e2.settings.selected.month = e2.dateMin.getUTCMonth()), e2.selectedMonth > e2.dateMax.getUTCMonth() && e2.selectedYear === e2.dateMax.getUTCFullYear() && (e2.settings.selected.month = e2.dateMax.getUTCMonth()), e2.actions.clickYear && e2.actions.clickYear(t2, e2.selectedYear), e2.settings.selected.year = e2.selectedYear, N(e2);
                }
              }
            })(), e2.settings.selection.month && ("month" !== e2.currentType && y2 ? D(e2) : "month" === e2.currentType && y2 ? (e2.currentType = e2.type, N(e2)) : m2 && (e2.selectedMonth = Number(m2.dataset.calendarMonth), e2.currentType = e2.type, e2.actions.clickMonth && e2.actions.clickMonth(t2, e2.selectedMonth), e2.settings.selected.month = e2.selectedMonth, N(e2)));
          });
        }, E = (e2) => {
          e2.HTMLElement && (N(e2), H(e2));
        }, A = (e2) => `
	<div class="${e2.header}">
		<#ArrowPrev />
		<div class="${e2.headerContent}">
			<#Month />
			<#Year />
		</div>
		<#ArrowNext />
	</div>
	<div class="${e2.wrapper}">
		<#WeekNumbers />
		<div class="${e2.content}">
			<#Week />
			<#Days />
		</div>
	</div>
	<#ControlTime />
`, B = (e2) => `
	<div class="${e2.header}">
		<div class="${e2.headerContent}">
			<#Month />
			<#Year />
		</div>
	</div>
	<div class="${e2.wrapper}">
		<div class="${e2.content}">
			<#Months />
		</div>
	</div>
`, P = (e2) => `
	<div class="${e2.header}">
		<#ArrowPrev />
		<div class="${e2.headerContent}">
			<#Month />
			<#Year />
		</div>
		<#ArrowNext />
	</div>
	<div class="${e2.wrapper}">
		<div class="${e2.content}">
			<#Years />
		</div>
	</div>
`, K = { calendar: "vanilla-calendar", calendarDefault: "vanilla-calendar_default", calendarMonth: "vanilla-calendar_month", calendarYear: "vanilla-calendar_year", header: "vanilla-calendar-header", headerContent: "vanilla-calendar-header__content", month: "vanilla-calendar-month", monthDisabled: "vanilla-calendar-month_disabled", year: "vanilla-calendar-year", yearDisabled: "vanilla-calendar-year_disabled", arrow: "vanilla-calendar-arrow", arrowPrev: "vanilla-calendar-arrow_prev", arrowNext: "vanilla-calendar-arrow_next", wrapper: "vanilla-calendar-wrapper", content: "vanilla-calendar-content", week: "vanilla-calendar-week", weekDay: "vanilla-calendar-week__day", weekDayWeekend: "vanilla-calendar-week__day_weekend", days: "vanilla-calendar-days", daysSelecting: "vanilla-calendar-days_selecting", months: "vanilla-calendar-months", monthsSelecting: "vanilla-calendar-months_selecting", monthsMonth: "vanilla-calendar-months__month", monthsMonthSelected: "vanilla-calendar-months__month_selected", monthsMonthDisabled: "vanilla-calendar-months__month_disabled", years: "vanilla-calendar-years", yearsSelecting: "vanilla-calendar-years_selecting", yearsYear: "vanilla-calendar-years__year", yearsYearSelected: "vanilla-calendar-years__year_selected", yearsYearDisabled: "vanilla-calendar-years__year_disabled", time: "vanilla-calendar-time", timeContent: "vanilla-calendar-time__content", timeHours: "vanilla-calendar-time__hours", timeMinutes: "vanilla-calendar-time__minutes", timeKeeping: "vanilla-calendar-time__keeping", timeRanges: "vanilla-calendar-time__ranges", timeRange: "vanilla-calendar-time__range", day: "vanilla-calendar-day", dayPopup: "vanilla-calendar-day__popup", dayBtn: "vanilla-calendar-day__btn", dayBtnPrev: "vanilla-calendar-day__btn_prev", dayBtnNext: "vanilla-calendar-day__btn_next", dayBtnToday: "vanilla-calendar-day__btn_today", dayBtnSelected: "vanilla-calendar-day__btn_selected", dayBtnDisabled: "vanilla-calendar-day__btn_disabled", dayBtnIntermediate: "vanilla-calendar-day__btn_intermediate", dayBtnWeekend: "vanilla-calendar-day__btn_weekend", dayBtnHoliday: "vanilla-calendar-day__btn_holiday", weekNumbers: "vanilla-calendar-week-numbers", weekNumbersTitle: "vanilla-calendar-week-numbers__title", weekNumbersContent: "vanilla-calendar-week-numbers__content", weekNumber: "vanilla-calendar-week-number", isFocus: "vanilla-calendar-is-focus" };
        var O = Object.defineProperty, F = Object.getOwnPropertySymbols, q = Object.prototype.hasOwnProperty, I = Object.prototype.propertyIsEnumerable, j = (e2, t2, s2) => t2 in e2 ? O(e2, t2, { enumerable: true, configurable: true, writable: true, value: s2 }) : e2[t2] = s2;
        class W {
          constructor(e2, t2) {
            var s2, l2, a2, n2, i2, d2, r2, c2, o2, u2, v2, y2, m2, g2, C2, S2, h2, b2, p2, M2, T2, D2, w2, $2, f2, Y2, k2, x2, L2, _2, U2, H2, O2, W2, R2, V, z, G, J, Q, X, Z, ee, te, se, le, ae, ne, ie, de, re, ce, oe, ue, ve, ye, me, ge, Ce, Se, he, be, pe, Me, Te, De, we, $e, fe, Ye, ke, xe, Le, _e, Ne, Ue, He, Ee, Ae, Be, Pe, Ke, Oe, Fe, qe, Ie, je, We, Re, Ve, ze, Ge, Je, Qe, Xe;
            this.update = () => N(this), this.init = () => E(this), this.HTMLElement = "string" == typeof e2 ? document.querySelector(e2) : e2, this.HTMLElement && (this.type = null != (s2 = null == t2 ? void 0 : t2.type) ? s2 : "default", this.date = { min: null != (a2 = null == (l2 = null == t2 ? void 0 : t2.date) ? void 0 : l2.min) ? a2 : "1970-01-01", max: null != (i2 = null == (n2 = null == t2 ? void 0 : t2.date) ? void 0 : n2.max) ? i2 : "2470-12-31", today: null != (r2 = null == (d2 = null == t2 ? void 0 : t2.date) ? void 0 : d2.today) ? r2 : new Date() }, this.settings = { lang: null != (o2 = null == (c2 = null == t2 ? void 0 : t2.settings) ? void 0 : c2.lang) ? o2 : "en", iso8601: null == (v2 = null == (u2 = null == t2 ? void 0 : t2.settings) ? void 0 : u2.iso8601) || v2, range: { min: null != (g2 = null == (m2 = null == (y2 = null == t2 ? void 0 : t2.settings) ? void 0 : y2.range) ? void 0 : m2.min) ? g2 : "1970-01-01", max: null != (h2 = null == (S2 = null == (C2 = null == t2 ? void 0 : t2.settings) ? void 0 : C2.range) ? void 0 : S2.max) ? h2 : "2470-12-31", disabled: null != (M2 = null == (p2 = null == (b2 = null == t2 ? void 0 : t2.settings) ? void 0 : b2.range) ? void 0 : p2.disabled) ? M2 : null, enabled: null != (w2 = null == (D2 = null == (T2 = null == t2 ? void 0 : t2.settings) ? void 0 : T2.range) ? void 0 : D2.enabled) ? w2 : null }, selection: { day: null != (Y2 = null == (f2 = null == ($2 = null == t2 ? void 0 : t2.settings) ? void 0 : $2.selection) ? void 0 : f2.day) ? Y2 : "single", month: null == (L2 = null == (x2 = null == (k2 = null == t2 ? void 0 : t2.settings) ? void 0 : k2.selection) ? void 0 : x2.month) || L2, year: null == (H2 = null == (U2 = null == (_2 = null == t2 ? void 0 : t2.settings) ? void 0 : _2.selection) ? void 0 : U2.year) || H2, time: null != (R2 = null == (W2 = null == (O2 = null == t2 ? void 0 : t2.settings) ? void 0 : O2.selection) ? void 0 : W2.time) && R2, controlTime: null != (G = null == (z = null == (V = null == t2 ? void 0 : t2.settings) ? void 0 : V.selection) ? void 0 : z.controlTime) ? G : "all", stepHours: null != (X = null == (Q = null == (J = null == t2 ? void 0 : t2.settings) ? void 0 : J.selection) ? void 0 : Q.stepHours) ? X : 1, stepMinutes: null != (te = null == (ee = null == (Z = null == t2 ? void 0 : t2.settings) ? void 0 : Z.selection) ? void 0 : ee.stepMinutes) ? te : 1 }, selected: { dates: null != (ae = null == (le = null == (se = null == t2 ? void 0 : t2.settings) ? void 0 : se.selected) ? void 0 : le.dates) ? ae : null, month: null != (de = null == (ie = null == (ne = null == t2 ? void 0 : t2.settings) ? void 0 : ne.selected) ? void 0 : ie.month) ? de : null, year: null != (oe = null == (ce = null == (re = null == t2 ? void 0 : t2.settings) ? void 0 : re.selected) ? void 0 : ce.year) ? oe : null, holidays: null != (ye = null == (ve = null == (ue = null == t2 ? void 0 : t2.settings) ? void 0 : ue.selected) ? void 0 : ve.holidays) ? ye : null, time: null != (Ce = null == (ge = null == (me = null == t2 ? void 0 : t2.settings) ? void 0 : me.selected) ? void 0 : ge.time) ? Ce : null }, visibility: { monthShort: null == (be = null == (he = null == (Se = null == t2 ? void 0 : t2.settings) ? void 0 : Se.visibility) ? void 0 : he.monthShort) || be, weekNumbers: null != (Te = null == (Me = null == (pe = null == t2 ? void 0 : t2.settings) ? void 0 : pe.visibility) ? void 0 : Me.weekNumbers) && Te, weekend: null == ($e = null == (we = null == (De = null == t2 ? void 0 : t2.settings) ? void 0 : De.visibility) ? void 0 : we.weekend) || $e, today: null == (ke = null == (Ye = null == (fe = null == t2 ? void 0 : t2.settings) ? void 0 : fe.visibility) ? void 0 : Ye.today) || ke, disabled: null != (_e = null == (Le = null == (xe = null == t2 ? void 0 : t2.settings) ? void 0 : xe.visibility) ? void 0 : Le.disabled) && _e } }, this.locale = { months: null != (Ue = null == (Ne = null == t2 ? void 0 : t2.locale) ? void 0 : Ne.months) ? Ue : [], weekday: null != (Ee = null == (He = null == t2 ? void 0 : t2.locale) ? void 0 : He.weekday) ? Ee : [] }, this.actions = { clickDay: null != (Be = null == (Ae = null == t2 ? void 0 : t2.actions) ? void 0 : Ae.clickDay) ? Be : null, clickMonth: null != (Ke = null == (Pe = null == t2 ? void 0 : t2.actions) ? void 0 : Pe.clickMonth) ? Ke : null, clickYear: null != (Fe = null == (Oe = null == t2 ? void 0 : t2.actions) ? void 0 : Oe.clickYear) ? Fe : null, clickArrow: null != (Ie = null == (qe = null == t2 ? void 0 : t2.actions) ? void 0 : qe.clickArrow) ? Ie : null, changeTime: null != (We = null == (je = null == t2 ? void 0 : t2.actions) ? void 0 : je.changeTime) ? We : null }, this.popups = null != (Re = null == t2 ? void 0 : t2.popups) ? Re : null, this.CSSClasses = (() => {
              const e3 = ((e4, t3) => {
                for (var s3 in t3 || (t3 = {}))
                  q.call(t3, s3) && j(e4, s3, t3[s3]);
                if (F)
                  for (var s3 of F(t3))
                    I.call(t3, s3) && j(e4, s3, t3[s3]);
                return e4;
              })({}, K);
              return Object.keys(K).forEach((s3) => {
                var l3;
                (null == (l3 = null == t2 ? void 0 : t2.CSSClasses) ? void 0 : l3[s3]) ? e3[s3] = t2.CSSClasses[s3] : e3[s3] = K[s3];
              }), e3;
            })(), this.DOMTemplates = { default: null != (ze = null == (Ve = null == t2 ? void 0 : t2.DOMTemplates) ? void 0 : Ve.default) ? ze : A(this.CSSClasses), month: null != (Je = null == (Ge = null == t2 ? void 0 : t2.DOMTemplates) ? void 0 : Ge.month) ? Je : B(this.CSSClasses), year: null != (Xe = null == (Qe = null == t2 ? void 0 : t2.DOMTemplates) ? void 0 : Qe.year) ? Xe : P(this.CSSClasses) }, this.currentType = this.type, this.selectedKeeping = null, this.userTime = false);
          }
        }
        window.VanillaCalendar = W;
        const R = W;
        return t;
      })());
    }
  }
});
export default require_vanilla_calendar_min();
/*! Bundled license information:

@uvarov.frontend/vanilla-calendar/build/vanilla-calendar.min.js:
  (*! name: @uvarov.frontend/vanilla-calendar | url: https://github.com/uvarov-frontend/vanilla-calendar *)
*/
//# sourceMappingURL=@uvarov__frontend_vanilla-calendar.js.map
